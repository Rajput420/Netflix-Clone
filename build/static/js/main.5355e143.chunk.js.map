{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchComedyMovies","fetchHorrorMovies","fetchDocumentaries","fetchRomanceMovies","fetchActionMovies","Banner","string","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5355e143.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n const instance = axios.create({\r\n     baseURL: 'https://api.themoviedb.org/3',\r\n })\r\n\r\n export default instance","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    // a snipt code which runs based on condition/variable\r\n    useEffect(() => {\r\n        //if [], run once when the row loads,and  don't run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n            //https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars:{\r\n           // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        }\r\n        else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            })\r\n            .catch(error => console.log(error));\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2> {title} </h2>\r\n            <div className=\"row_posters\">\r\n                {/* row posters */}\r\n                {movies.map(movie => (\r\n                    <img \r\n                    onClick={() => handleClick(movie)}\r\n                    key={movie.id} className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} \r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                    alt={movie.name} />\r\n\r\n\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Row","const API_KEY = '17c5f6b75c0baf14e3fffa3f711d0782';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`, \r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`, \r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\"\r\n\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                 Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n                 \r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    function truncate(string, n) {\r\n        return string?.length > n ? string.substr(0, n-1) + \"...\" : string;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" \r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n\r\n            backgroundPosition: \"center center\"}}>\r\n            <div className=\"banner_contents\">\r\n            <h1 className=\"banner_title\"> {movie?.title || movie?.name || movie?.original_name} </h1>\r\n\r\n            <div className=\"banner_buttons\">\r\n                <button className=\"banner_button\">Play</button>\r\n                <button className=\"banner_button\">My List</button>\r\n\r\n                <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            </div>\r\n            <div className=\"banner-fadebottom\"/>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] =  useState(true)\r\n  useEffect(() =>{\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            }\r\n            else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n\r\n    }, []);\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav_logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n            alt=\"Netflix Logo\"/>\r\n\r\n            <img className=\"nav_avtar\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n            alt=\"Netflix Logo\"/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav/>\n      <Banner/>\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true}/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentaries} />\n      \n\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}